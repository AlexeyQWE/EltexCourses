/*
 * This file is generated by jOOQ.
 */
package eltex.tasks.database.tables;


import eltex.tasks.database.DefaultSchema;
import eltex.tasks.database.tables.records.LanguagesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Languages extends TableImpl<LanguagesRecord> {

    private static final long serialVersionUID = 1889569084;

    /**
     * The reference instance of <code>languages</code>
     */
    public static final Languages LANGUAGES = new Languages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguagesRecord> getRecordType() {
        return LanguagesRecord.class;
    }

    /**
     * The column <code>languages.id</code>.
     */
    public final TableField<LanguagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>languages.title</code>.
     */
    public final TableField<LanguagesRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>languages</code> table reference
     */
    public Languages() {
        this(DSL.name("languages"), null);
    }

    /**
     * Create an aliased <code>languages</code> table reference
     */
    public Languages(String alias) {
        this(DSL.name(alias), LANGUAGES);
    }

    /**
     * Create an aliased <code>languages</code> table reference
     */
    public Languages(Name alias) {
        this(alias, LANGUAGES);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LanguagesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(eltex.tasks.database.tables.Languages.LANGUAGES, "KEY_languages_PRIMARY", eltex.tasks.database.tables.Languages.LANGUAGES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LanguagesRecord>> getKeys() {
        return Arrays.<UniqueKey<LanguagesRecord>>asList(
              Internal.createUniqueKey(eltex.tasks.database.tables.Languages.LANGUAGES, "KEY_languages_PRIMARY", eltex.tasks.database.tables.Languages.LANGUAGES.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Languages as(String alias) {
        return new Languages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Languages as(Name alias) {
        return new Languages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(String name) {
        return new Languages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(Name name) {
        return new Languages(name, null);
    }
}
